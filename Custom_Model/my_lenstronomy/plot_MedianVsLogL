#!/usr/bin/env python
# coding: utf-8

# In[2]:


import corner
import pickle
import json
import numpy as np
import argparse
import matplotlib.lines as mlines
from Custom_Model.my_lenstronomy.my_kwargs2args import my_kwarg2args

if __name__ =="__main__":
    parser = argparse.ArgumentParser(description="Produces the corner plot with comparison between read_updated_results.data (Median) and read_results.data (Best LogL)")
    parser.add_argument("-c", "--cut_mcmc", type=int, dest="cut_mcmc", default=0,
                        help="cut the first <c> steps of the mcmc to ignore them")
    parser.add_argument("-ws", "--ws", type=int, dest="ws", default=False,
                        help="If considering a model without source light")
    parser.add_argument('SETTING_FILE', help="setting file to consider")
    args = parser.parse_args()

    cut_mcmc =args.cut_mcmc
    ws = args.ws

    setting_name =  args.SETTING_FILE.replace(".py","")
    backup_path="backup_results"


    savemcmc_path="./"+backup_path+"/"+setting_name.replace("settings_","mcmc_")+"/"
    savefig_path="./"+backup_path+"/"+setting_name.replace("settings_","")+"/" 
    mcmc_file=savemcmc_path+setting_name.replace("settings","mcmc_smpl")+".json"
    param_file=savemcmc_path+setting_name.replace("settings","mcmc_prm")+".dat"

    #MCMC sample
    mcmc_file = open(mcmc_file, 'r')
    samples_mcmc = np.array(json.load(mcmc_file))[cut_mcmc:]
    mcmc_file.close()

    #parameters' name
    param_mcmc=[]
    with open(param_file,"r") as param_file:
        param_mcmc=(param_file.readlines())
        
    for i in range(len(param_mcmc)):
        param_mcmc[i]=param_mcmc[i].replace(",\n","")
        
    # results from median of each param
    res_med =np.mean(samples_mcmc,axis=0)


    # results from best logL
    with open(savefig_path+"/read_results.data","rb") as file:
        kwargs_res = pickle.load(file)


    res_logL =  my_kwarg2args(kwargs_res,setting_name,cut_mcmc=cut_mcmc,free_pert=False,ws=ws)


    #Plot
    figure = corner.corner(samples_mcmc)

    corner.overplot_lines(figure, res_med, color="red")
    corner.overplot_points(figure, res_med[None], marker="s", color="red")
    corner.overplot_lines(figure, res_logL, color="blue")
    corner.overplot_points(figure, res_logL[None], marker="s", color="blue")

    line_med = mlines.Line2D([], [], color='red',label='Median')
    line_logL = mlines.Line2D([], [], color='red',label='Best logL')
    figure2.legend(handles=[line_med,line_logL])

    figure.savefig(savefig_path+"/MedianVsLogL.png")

